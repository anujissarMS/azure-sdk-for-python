# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CommunicationError(msrest.serialization.Model):
    """The Communication Services error.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required. The error code.
    :vartype code: str
    :ivar message: Required. The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: Further details about specific errors that led to this error.
    :vartype details: list[~azure.communication.rooms.models.CommunicationError]
    :ivar inner_error: The inner error if any.
    :vartype inner_error: ~azure.communication.rooms.models.CommunicationError
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'inner_error': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CommunicationError]'},
        'inner_error': {'key': 'innererror', 'type': 'CommunicationError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code: Required. The error code.
        :paramtype code: str
        :keyword message: Required. The error message.
        :paramtype message: str
        """
        super(CommunicationError, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = None
        self.details = None
        self.inner_error = None


class CommunicationErrorResponse(msrest.serialization.Model):
    """The Communication Services error.

    All required parameters must be populated in order to send to Azure.

    :ivar error: Required. The Communication Services error.
    :vartype error: ~azure.communication.rooms.models.CommunicationError
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CommunicationError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword error: Required. The Communication Services error.
        :paramtype error: ~azure.communication.rooms.models.CommunicationError
        """
        super(CommunicationErrorResponse, self).__init__(**kwargs)
        self.error = kwargs['error']


class CreateRoomRequest(msrest.serialization.Model):
    """Request payload for creating new room.

    :ivar valid_from: The timestamp from when the room is open for joining. The timestamp is in
     RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
    :vartype valid_from: ~datetime.datetime
    :ivar valid_until: The timestamp from when the room can no longer be joined. The timestamp is
     in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
    :vartype valid_until: ~datetime.datetime
    :ivar participants: (Optional) Collection of identities invited to the room.
    :vartype participants: dict[str, any]
    """

    _attribute_map = {
        'valid_from': {'key': 'validFrom', 'type': 'iso-8601'},
        'valid_until': {'key': 'validUntil', 'type': 'iso-8601'},
        'participants': {'key': 'participants', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword valid_from: The timestamp from when the room is open for joining. The timestamp is in
         RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
        :paramtype valid_from: ~datetime.datetime
        :keyword valid_until: The timestamp from when the room can no longer be joined. The timestamp
         is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
        :paramtype valid_until: ~datetime.datetime
        :keyword participants: (Optional) Collection of identities invited to the room.
        :paramtype participants: dict[str, any]
        """
        super(CreateRoomRequest, self).__init__(**kwargs)
        self.valid_from = kwargs.get('valid_from', None)
        self.valid_until = kwargs.get('valid_until', None)
        self.participants = kwargs.get('participants', None)


class CreateRoomResponse(msrest.serialization.Model):
    """Response payload for create room operation.

    All required parameters must be populated in order to send to Azure.

    :ivar room: Required. The meeting room.
    :vartype room: ~azure.communication.rooms.models.RoomModel
    :ivar invalid_participants: Collection of participants failed to be added to the room.
    :vartype invalid_participants: dict[str, any]
    """

    _validation = {
        'room': {'required': True},
    }

    _attribute_map = {
        'room': {'key': 'room', 'type': 'RoomModel'},
        'invalid_participants': {'key': 'invalidParticipants', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword room: Required. The meeting room.
        :paramtype room: ~azure.communication.rooms.models.RoomModel
        :keyword invalid_participants: Collection of participants failed to be added to the room.
        :paramtype invalid_participants: dict[str, any]
        """
        super(CreateRoomResponse, self).__init__(**kwargs)
        self.room = kwargs['room']
        self.invalid_participants = kwargs.get('invalid_participants', None)


class RoomModel(msrest.serialization.Model):
    """The meeting room.

    :ivar id: Unique identifier of a room. This id is server generated.
    :vartype id: str
    :ivar created_date_time: The timestamp when the room was created at the server. The timestamp
     is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
    :vartype created_date_time: ~datetime.datetime
    :ivar valid_from: The timestamp from when the room is open for joining. The timestamp is in
     RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
    :vartype valid_from: ~datetime.datetime
    :ivar valid_until: The timestamp from when the room can no longer be joined. The timestamp is
     in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
    :vartype valid_until: ~datetime.datetime
    :ivar participants: Collection of identities invited to the room.
    :vartype participants: dict[str, any]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'valid_from': {'key': 'validFrom', 'type': 'iso-8601'},
        'valid_until': {'key': 'validUntil', 'type': 'iso-8601'},
        'participants': {'key': 'participants', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Unique identifier of a room. This id is server generated.
        :paramtype id: str
        :keyword created_date_time: The timestamp when the room was created at the server. The
         timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
        :paramtype created_date_time: ~datetime.datetime
        :keyword valid_from: The timestamp from when the room is open for joining. The timestamp is in
         RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
        :paramtype valid_from: ~datetime.datetime
        :keyword valid_until: The timestamp from when the room can no longer be joined. The timestamp
         is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
        :paramtype valid_until: ~datetime.datetime
        :keyword participants: Collection of identities invited to the room.
        :paramtype participants: dict[str, any]
        """
        super(RoomModel, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.valid_from = kwargs.get('valid_from', None)
        self.valid_until = kwargs.get('valid_until', None)
        self.participants = kwargs.get('participants', None)


class UpdateRoomRequest(msrest.serialization.Model):
    """Request payload for updating a room.

    :ivar valid_from: The timestamp from when the room is open for joining. The timestamp is in
     RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
    :vartype valid_from: ~datetime.datetime
    :ivar valid_until: The timestamp from when the room can no longer be joined. The timestamp is
     in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
    :vartype valid_until: ~datetime.datetime
    :ivar participants: (Optional) Collection of identities invited to the room.
    :vartype participants: dict[str, any]
    """

    _attribute_map = {
        'valid_from': {'key': 'validFrom', 'type': 'iso-8601'},
        'valid_until': {'key': 'validUntil', 'type': 'iso-8601'},
        'participants': {'key': 'participants', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword valid_from: The timestamp from when the room is open for joining. The timestamp is in
         RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
        :paramtype valid_from: ~datetime.datetime
        :keyword valid_until: The timestamp from when the room can no longer be joined. The timestamp
         is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
        :paramtype valid_until: ~datetime.datetime
        :keyword participants: (Optional) Collection of identities invited to the room.
        :paramtype participants: dict[str, any]
        """
        super(UpdateRoomRequest, self).__init__(**kwargs)
        self.valid_from = kwargs.get('valid_from', None)
        self.valid_until = kwargs.get('valid_until', None)
        self.participants = kwargs.get('participants', None)


class UpdateRoomResponse(msrest.serialization.Model):
    """Response payload for update room operation.

    All required parameters must be populated in order to send to Azure.

    :ivar room: Required. The meeting room.
    :vartype room: ~azure.communication.rooms.models.RoomModel
    :ivar invalid_participants: Collection of participants failed to be added to the room.
    :vartype invalid_participants: dict[str, any]
    """

    _validation = {
        'room': {'required': True},
    }

    _attribute_map = {
        'room': {'key': 'room', 'type': 'RoomModel'},
        'invalid_participants': {'key': 'invalidParticipants', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword room: Required. The meeting room.
        :paramtype room: ~azure.communication.rooms.models.RoomModel
        :keyword invalid_participants: Collection of participants failed to be added to the room.
        :paramtype invalid_participants: dict[str, any]
        """
        super(UpdateRoomResponse, self).__init__(**kwargs)
        self.room = kwargs['room']
        self.invalid_participants = kwargs.get('invalid_participants', None)
