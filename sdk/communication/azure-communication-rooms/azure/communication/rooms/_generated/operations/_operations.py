# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import Any, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

from .._vendor import _format_url_section
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]
JSONType = Any

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False

def build_ping_request(
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2021-04-07")  # type: str

    accept = "application/json"
    # Construct URL
    url = '/ping'

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_ping_test_request(
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2021-04-07")  # type: str

    accept = "application/json"
    # Construct URL
    url = '/pingtest'

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_rooms_create_room_request(
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2021-04-07")  # type: str
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json, text/json"
    # Construct URL
    url = '/rooms'

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_rooms_get_room_request(
    room_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2021-04-07")  # type: str

    accept = "application/json, text/json"
    # Construct URL
    url = '/rooms/{roomId}'
    path_format_arguments = {
        "roomId": _SERIALIZER.url("room_id", room_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_rooms_update_room_request(
    room_id: str,
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2021-04-07")  # type: str
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json, text/json"
    # Construct URL
    url = '/rooms/{roomId}'
    path_format_arguments = {
        "roomId": _SERIALIZER.url("room_id", room_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_rooms_delete_room_request(
    room_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2021-04-07")  # type: str

    accept = "application/json"
    # Construct URL
    url = '/rooms/{roomId}'
    path_format_arguments = {
        "roomId": _SERIALIZER.url("room_id", room_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

class AzureCommunicationRoomsServiceOperationsMixin(object):

    @distributed_trace
    def ping(
        self,
        **kwargs: Any
    ) -> None:
        """ping.

        :keyword api_version: Api Version. The default value is "2021-04-07". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype api_version: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            500: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-04-07")  # type: str

        
        request = build_ping_request(
            api_version=api_version,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    ping.metadata = {'url': '/ping'}  # type: ignore


    @distributed_trace
    def ping_test(
        self,
        **kwargs: Any
    ) -> None:
        """ping_test.

        :keyword api_version: Api Version. The default value is "2021-04-07". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype api_version: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            500: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-04-07")  # type: str

        
        request = build_ping_test_request(
            api_version=api_version,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    ping_test.metadata = {'url': '/pingtest'}  # type: ignore

class RoomsOperations(object):
    """RoomsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def create_room(
        self,
        create_room_request: JSONType = None,
        **kwargs: Any
    ) -> JSONType:
        """Creates a new room.

        Creates a new room.

        :param create_room_request: The create room request body.
        :type create_room_request: JSONType
        :keyword api_version: Api Version. The default value is "2021-04-07". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype api_version: str
        :return: JSON object
        :rtype: JSONType
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                create_room_request = {
                    "participants": {
                        "str": {}  # Optional. (Optional) Collection of identities invited to the room.
                    },
                    "validFrom": "2020-02-20 00:00:00",  # Optional. The timestamp from when the room is open for joining. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                    "validUntil": "2020-02-20 00:00:00"  # Optional. The timestamp from when the room can no longer be joined. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                }

                # response body for status code(s): 201
                response.json() == {
                    "invalidParticipants": {
                        "str": {}  # Optional. Collection of participants failed to be added to the room.
                    },
                    "room": {
                        "createdDateTime": "2020-02-20 00:00:00",  # Optional. The timestamp when the room was created at the server. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                        "id": "str",  # Optional. Unique identifier of a room. This id is server generated.
                        "participants": {
                            "str": {}  # Optional. Collection of identities invited to the room.
                        },
                        "validFrom": "2020-02-20 00:00:00",  # Optional. The timestamp from when the room is open for joining. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                        "validUntil": "2020-02-20 00:00:00"  # Optional. The timestamp from when the room can no longer be joined. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                    }
                }
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[JSONType]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            500: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-04-07")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if create_room_request is not None:
            _json = create_room_request
        else:
            _json = None

        request = build_rooms_create_room_request(
            api_version=api_version,
            content_type=content_type,
            json=_json,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_room.metadata = {'url': '/rooms'}  # type: ignore


    @distributed_trace
    def get_room(
        self,
        room_id: str,
        **kwargs: Any
    ) -> JSONType:
        """Retrieves an existing room by Id.

        Retrieves an existing room by Id.

        :param room_id: The id of the room requested.
        :type room_id: str
        :keyword api_version: Api Version. The default value is "2021-04-07". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype api_version: str
        :return: JSON object
        :rtype: JSONType
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The timestamp when the room was created at the server. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                    "id": "str",  # Optional. Unique identifier of a room. This id is server generated.
                    "participants": {
                        "str": {}  # Optional. Collection of identities invited to the room.
                    },
                    "validFrom": "2020-02-20 00:00:00",  # Optional. The timestamp from when the room is open for joining. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                    "validUntil": "2020-02-20 00:00:00"  # Optional. The timestamp from when the room can no longer be joined. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                }
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[JSONType]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            500: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-04-07")  # type: str

        
        request = build_rooms_get_room_request(
            room_id=room_id,
            api_version=api_version,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_room.metadata = {'url': '/rooms/{roomId}'}  # type: ignore


    @distributed_trace
    def update_room(
        self,
        room_id: str,
        patch_room_request: JSONType = None,
        **kwargs: Any
    ) -> JSONType:
        """Update a room with given changes.

        Update a room with given changes.

        :param room_id: The id of the room requested.
        :type room_id: str
        :param patch_room_request:
        :type patch_room_request: JSONType
        :keyword api_version: Api Version. The default value is "2021-04-07". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype api_version: str
        :return: JSON object
        :rtype: JSONType
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                patch_room_request = {
                    "participants": {
                        "str": {}  # Optional. (Optional) Collection of identities invited to the room.
                    },
                    "validFrom": "2020-02-20 00:00:00",  # Optional. (Optional) The timestamp from when the room is open for joining. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                    "validUntil": "2020-02-20 00:00:00"  # Optional. (Optional) The timestamp from when the room can no longer be joined. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                }

                # response body for status code(s): 200
                response.json() == {
                    "invalidParticipants": {
                        "str": {}  # Optional. Collection of participants failed to be added to the room.
                    },
                    "room": {
                        "createdDateTime": "2020-02-20 00:00:00",  # Optional. The timestamp when the room was created at the server. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                        "id": "str",  # Optional. Unique identifier of a room. This id is server generated.
                        "participants": {
                            "str": {}  # Optional. Collection of identities invited to the room.
                        },
                        "validFrom": "2020-02-20 00:00:00",  # Optional. The timestamp from when the room is open for joining. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                        "validUntil": "2020-02-20 00:00:00"  # Optional. The timestamp from when the room can no longer be joined. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                    }
                }
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[JSONType]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            500: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-04-07")  # type: str
        content_type = kwargs.pop('content_type', "application/merge-patch+json")  # type: Optional[str]

        if patch_room_request is not None:
            _content = patch_room_request
        else:
            _content = None

        request = build_rooms_update_room_request(
            room_id=room_id,
            api_version=api_version,
            content_type=content_type,
            content=_content,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_room.metadata = {'url': '/rooms/{roomId}'}  # type: ignore


    @distributed_trace
    def delete_room(
        self,
        room_id: str,
        **kwargs: Any
    ) -> None:
        """Delete a room.

        Delete a room.

        :param room_id: The id of the room requested.
        :type room_id: str
        :keyword api_version: Api Version. The default value is "2021-04-07". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype api_version: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            500: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-04-07")  # type: str

        
        request = build_rooms_delete_room_request(
            room_id=room_id,
            api_version=api_version,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_room.metadata = {'url': '/rooms/{roomId}'}  # type: ignore

